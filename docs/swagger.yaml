basePath: /
definitions:
  models.AddSongRequest:
    properties:
      group:
        type: string
      title:
        type: string
    required:
    - group
    - title
    type: object
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.MessageResponse:
    properties:
      message:
        type: string
    type: object
  models.Song:
    properties:
      filePath:
        type: string
      group:
        type: string
      id:
        type: integer
      text:
        type: string
      title:
        type: string
    required:
    - group
    - title
    type: object
  models.SongLyricsResponse:
    properties:
      currentPage:
        type: integer
      totalPages:
        type: integer
      verses:
        items:
          type: string
        type: array
    type: object
  models.UpdateSongRequest:
    properties:
      filePath:
        type: string
      group:
        type: string
      releaseDate:
        type: string
      text:
        type: string
      title:
        type: string
    type: object
host: localhost:8084
info:
  contact: {}
  description: This is a RESTful API for a music library.
  title: Music Library API
  version: "1.0"
paths:
  /songs:
    get:
      consumes:
      - application/json
      description: Возвращает список песен с фильтрацией по полям и пагинацией
      parameters:
      - description: Фильтр по группе
        in: query
        name: group
        type: string
      - description: Фильтр по названию песни
        in: query
        name: song
        type: string
      - description: Фильтр по дате релиза
        in: query
        name: releaseDate
        type: string
      - description: Номер страницы
        in: query
        name: page
        type: integer
      - description: Размер страницы
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Song'
            type: array
      summary: Получить песни
      tags:
      - Songs
    post:
      consumes:
      - application/json
      description: Добавляет новую песню в библиотеку
      parameters:
      - description: Группа и название песни
        in: body
        name: song
        required: true
        schema:
          $ref: '#/definitions/models.AddSongRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Song'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Добавить песню
      tags:
      - Songs
  /songs/{id}:
    delete:
      consumes:
      - application/json
      description: Удаляет песню из библиотеки по указанному ID
      parameters:
      - description: ID песни
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Удалить песню
      tags:
      - Songs
    put:
      consumes:
      - application/json
      description: Обновляет данные песни по ID
      parameters:
      - description: ID песни
        in: path
        name: id
        required: true
        type: integer
      - description: Данные для обновления
        in: body
        name: song
        required: true
        schema:
          $ref: '#/definitions/models.UpdateSongRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Song'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Обновить песню
      tags:
      - Songs
  /songs/{id}/lyrics:
    get:
      consumes:
      - application/json
      description: Возвращает текст песни, разбитый на куплеты, с поддержкой пагинации
      parameters:
      - description: ID песни
        in: path
        name: id
        required: true
        type: integer
      - description: Номер страницы
        in: query
        name: page
        type: integer
      - description: Размер страницы
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SongLyricsResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Получить текст песни
      tags:
      - Songs
swagger: "2.0"
